/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */


/******************************************************************************
XRP7725 Command Library

The I2C Slave will support 2 modes of communication:
    (1) Standard
        Commands will be 8 bits long (with addresses less than 0x80) and data
        will be transmitted in word (16 bit) lengths.
    
    (2) Register
        Addresses represented in 16 bits but only transmit data in byte (8 bit)
        lengths. The High Byte of the register addresses will always be > 0x80.
    
The XRP7725 can support 4 types of commands:
    (1) System
        Monitor and manage the XRP7725, and interrupts and faults generated by
        it.
        
    (2) Power
        Control, monitor and adjust power parameters in a running
        system.
        
    (3) IO
        Control direction and polarity of GPIOs and PSIOs.
    
    (4) Flash
        Program customer configurations into NVM.
******************************************************************************/

#include "Arduino.h"
#include "PowerXR.h"
#include <Wire.h>

#define VIL_ACC_INIT     0x70
#define VIL_ACC_READ_CH1 0x71
#define VIL_ACC_READ_CH2 0x72
#define VIL_ACC_READ_CH3 0x73
#define VIL_ACC_READ_CH4 0x74


//<<constructor>>
Xrp7725::Xrp7725(int i2c_addr){
    _i2c_addr = i2c_addr;
}

//<<destructor>>
Xrp7725::~Xrp7725(){    
    /*nothing to destruct*/    
}

/*-----------------------------------------------------------------------------
    float power_read_vil_ch(byte);
    Report voltage value across the synchronous FET read from AUX ADC.
-----------------------------------------------------------------------------*/
float Xrp7725::power_read_vil_ch(byte channel, word num_samples) {
    word read_sum = standard_read(VIL_ACC_READ_CH1 + channel);
    word r_value = read_sum/num_samples;
    float value = ((r_value * 0.01)/get_ife_gain(channel)) - 0.04;
    return value;
}

/*-----------------------------------------------------------------------------
    float get_average_current_ch(byte channel, float ripple, float rds_on, word num_samples);
    Report channel average current reading.
-----------------------------------------------------------------------------*/
float Xrp7725::get_average_current_ch(byte channel, float ripple, float rds_on, word num_samples) {
    float lowside = power_read_vil_ch(channel, num_samples);
    float current = max(0.0, ((lowside/rds_on) + ripple/2));
    return current;
}

/*-----------------------------------------------------------------------------
    byte initialize_accumulator();
    Initialize accumulator counter.
-----------------------------------------------------------------------------*/
byte Xrp7725::initialize_accumulator(){
    return standard_read(VIL_ACC_INIT);
}